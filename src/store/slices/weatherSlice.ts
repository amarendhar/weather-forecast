import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { RootState } from 'store'
import { Status } from 'types'

export type Weather = {
  city: {
    id: number
    name: string
    coord: {
      lat: number
      lon: number
    }
    country: string
  }
  cnt: number
  cod: string
  list: {
    dt: number
    main: {
      temp: number
      temp_min: number
      temp_max: number
      pressure: number
      sea_level: number
      grnd_level: number
      humidity: number
      temp_kf: number
    }
    weather: {
      id: number
      main: string // Clear
      description: string
      icon: string
    }[]
    clouds: {
      all: number
    }
    wind: {
      speed: number
      deg: number
    }
    sys: {
      pod: string
    }
    dt_txt: string // date
  }[]
  message: number
}

export interface WeatherState {
  // `status` prop is suggested by reduxjs-toolkit tutorial, instead of `isLoading & hasError` props.
  status: Status
  data: Weather
}

const initialState: WeatherState = {
  data: {} as Weather,
  status: Status.IDEAL,
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchWeather(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchWeather = createAsyncThunk(
  'weather/fetchWeather',
  async () => {
    const response = await fetch('/weather')
    const data = await response.json()
    // The value we return becomes the `fulfilled` action payload
    return data
  }
)

export const weatherSlice = createSlice({
  name: 'weather',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchWeather.pending, (state) => {
        state.status = Status.LOADING
      })
      .addCase(fetchWeather.fulfilled, (state, action) => {
        state.status = Status.IDEAL
        state.data = action.payload
      })
      .addCase(fetchWeather.rejected, (state) => {
        state.status = Status.FAILED
      })
  },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.weather.value)`
export const selectWeather = (state: RootState) => state.weather

export default weatherSlice.reducer
